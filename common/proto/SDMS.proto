package SDMS;

// ============================ Enums

enum ErrorCode
{
    ID_BAD_REQUEST              = 1;
    ID_INTERNAL_ERROR           = 2;
    ID_CLIENT_ERROR             = 3;
    ID_SERVICE_ERROR            = 4;
    ID_AUTHN_REQUIRED           = 5;
    ID_AUTHN_ERROR              = 6;
    ID_DEST_PATH_ERROR          = 7;
    ID_DEST_FILE_ERROR          = 8;
}

enum ServiceStatus
{
    SS_NORMAL       = 0;
    SS_DEGRADED     = 1;
    SS_FAILED       = 2;
    SS_OFFLINE      = 3;
}

enum CollDelMode
{
    CDM_ALL         = 0;
    CDM_OWNED       = 1;
}

enum SearchScope
{
    SS_USER                     = 1;
    SS_PROJECT                  = 2;
    SS_OWNED_PROJECTS           = 3;
    SS_MANAGED_PROJECTS         = 4;
    SS_MEMBER_PROJECTS          = 5;
    SS_COLLECTION               = 6;
    SS_TOPIC                    = 7;
    SS_SHARED_BY_USER           = 8;
    SS_SHARED_BY_ANY_USER       = 9;
    SS_SHARED_BY_PROJECT        = 10;
    SS_SHARED_BY_ANY_PROJECT    = 11;
    SS_VIEW                     = 12;
}

enum DependencyType
{
    DEP_IS_DERIVED_FROM         = 0;
    DEP_IS_COMPONENT_OF         = 1;
    DEP_IS_NEW_VERSION_OF       = 2;
    DEP_TYPE_COUNT              = 3;
}

enum DependencyDir
{
    DEP_IN                      = 0;
    DEP_OUT                     = 1;
}

enum SortOption
{
    SORT_ID                     = 0;
    SORT_TITLE                  = 1;
    SORT_TIME_CREATE            = 2;
    SORT_TIME_UPDATE            = 3;
}

enum ProjectRole
{
    PROJ_NO_ROLE    = 0;
    PROJ_MEMBER     = 1;
    PROJ_MANAGER    = 2;
    PROJ_ADMIN      = 3;
}

// ============================ Data Structures

message AllocStatsData
{
    required string             repo        = 1;
    required uint32             rec_count   = 2;
    required uint32             file_count  = 3;
    required uint64             data_size   = 4;
    repeated uint32             histogram   = 5;
}

message AllocData
{
    required string             repo        = 1;
    required uint64             data_limit  = 2;
    required uint64             data_size   = 3;
    required uint32             rec_limit   = 4;
    required uint32             rec_count   = 5;
    required string             path        = 6;
    optional string             id          = 7;
    optional bool               is_def      = 8;
    optional AllocStatsData     stats       = 9;
}

// For viewing dependencies
message DependencyData
{
    required string             id          = 1;
    optional string             alias       = 2;
    optional uint32             notes       = 3;
    required DependencyType     type        = 4;
    required DependencyDir      dir         = 5;
}

// For specifying dependencies
message DependencySpecData
{
    required string             id          = 1;
    required DependencyType     type        = 2;
}

message UserData
{
    required string             uid             = 1;
    required string             name_last       = 2;
    required string             name_first      = 3;
    optional string             email           = 4;
    optional string             options         = 5;
    optional bool               is_admin        = 6;
    optional bool               is_repo_admin   = 7;
    repeated string             ident           = 8;
    repeated AllocData          alloc           = 9;
}

message ProjectData
{
    required string             id          = 1;
    required string             title       = 2;
    optional string             desc        = 3;
    optional string             owner       = 4;
    optional uint32             ct          = 5;
    optional uint32             ut          = 6;
    repeated string             admin       = 7;
    repeated string             member      = 8;
    repeated AllocData          alloc       = 9;
}

message ListingData
{
    required string             id          = 1;
    required string             title       = 2;
    optional string             alias       = 3;
    optional bool               locked      = 4;
    optional string             owner       = 5;
    optional string             creator     = 6;
    optional int32              gen         = 7;
    optional double             size        = 8;
    optional uint32             notes       = 9;
    optional string             doi         = 10;
    optional string             url         = 11;
    optional bool               deps_avail  = 12;
    repeated DependencyData     dep         = 13;
}

message PathData
{
    repeated ListingData        item        = 1;
}

message RecordData
{
    required string             id          = 1;
    required string             title       = 2;
    optional string             alias       = 3;
    optional string             desc        = 4;
    optional string             keyw        = 5;
    optional string             doi         = 6;
    optional string             data_url    = 7;
    optional string             metadata    = 8;
    optional string             repo_id     = 9;
    optional double             size        = 10;
    optional string             source      = 11;
    optional string             ext         = 12;
    optional bool               ext_auto    = 13;
    optional uint32             ct          = 14;
    optional uint32             ut          = 15;
    optional uint32             dt          = 16;
    optional string             owner       = 17;
    optional string             creator     = 18;
    optional bool               locked      = 19;
    optional string             parent_id   = 20;
    repeated DependencyData     deps        = 21;
    optional uint32             notes       = 22;
}

// Fields required for a data repo to locate raw data
// TODO Path will be removed and replaced with owner ID
message RecordDataLocation
{
    required string             id          = 1;
    required string             path        = 2;
}

// A list of data locations associated with a specific repo
message RepoRecordDataLocations
{
    required string             repo_id     = 1;
    repeated RecordDataLocation loc         = 2;
}

message RecordDataSize
{
    required string             id          = 1;
    required double             size        = 2;
}

message CollData
{
    required string             id          = 1;
    required string             title       = 2;
    optional string             alias       = 3;
    optional string             desc        = 4;
    optional string             topic       = 5;
    optional string             owner       = 6;
    optional uint32             ct          = 7;
    optional uint32             ut          = 8;
    optional string             parent_id   = 9;
    optional uint32             notes       = 10;
}

message GroupData
{
    required string             uid         = 1;
    required string             gid         = 2;
    optional string             title       = 3;
    optional string             desc        = 4;
    repeated string             member      = 5;
}

message ACLRule
{
    required string             id          = 1;
    optional uint32             grant       = 2;
    optional uint32             inhgrant    = 3;
}

message RepoData
{
    required string             id          = 1;
    optional string             title       = 2;
    optional string             desc        = 3;
    optional uint64             capacity    = 4;
    optional string             pub_key     = 5;
    optional string             address     = 6;
    optional string             endpoint    = 7;
    optional string             path        = 8;
    optional string             domain      = 9;
    optional string             exp_path    = 10;
    repeated string             admin       = 11;
}

message QueryData
{
    required string             id          = 1;
    required string             title       = 2;
    required string             query       = 3;
    optional string             owner       = 4;
    optional bool               use_owner   = 5;
    optional bool               use_sh_usr  = 6;
    optional bool               use_sh_prj  = 7;
    optional uint32             ct          = 8;
    optional uint32             ut          = 9;
}

// -------------------------------------------- ANNOTATION DEFINES

enum NoteType
{
    NOTE_QUESTION   = 0;
    NOTE_INFO       = 1;
    NOTE_WARN       = 2;
    NOTE_ERROR      = 3;
}

enum NoteState
{
    NOTE_CLOSED     = 0;
    NOTE_OPEN       = 1;
    NOTE_ACTIVE     = 2;
}

message NoteComment
{
    required string             user    = 1;
    required uint32             time    = 2;
    required string             comment = 3;
    optional NoteType           type    = 4;
    optional NoteState          state   = 5;
}

message NoteData
{
    required string             id          = 1;
    required NoteType           type        = 2;
    required NoteState          state       = 3;
    required string             subject_id  = 4;
    required string             title       = 5;
    repeated NoteComment        comment     = 6;
    required uint32             ct          = 7;
    required uint32             ut          = 8;
    optional string             parent_id   = 9;
    optional bool               has_child   = 10;
}

// -------------------------------------------------- TASK DEFINES

enum TaskType
{
    TT_DATA_GET         = 0;
    TT_DATA_PUT         = 1;
    TT_DATA_DEL         = 2;
    TT_REC_CHG_ALLOC    = 3;
    TT_REC_CHG_OWNER    = 4;
    TT_REC_DEL          = 5;
    TT_ALLOC_CREATE     = 6;
    TT_ALLOC_DEL        = 7;
    TT_USER_DEL         = 8;
    TT_PROJ_DEL         = 9;
}

enum TaskStatus
{
    TS_INIT         = 0; // Can be scheduled
    TS_READY        = 1; // Can be scheduled
    TS_RUNNING      = 2; // Running currently
    TS_BLOCKED      = 3; // Will be scheduled when blocking tasks are cleared
    TS_SUCCEEDED    = 4;
    TS_FAILED       = 5; // Permanent failure (transient failures will be retried several times)
}

enum TaskCommand
{
    TC_RESCHEDULE           = 1; // Task is ready but should be rescheduled to back of ready queue
    TC_BLOCKED              = 2; // Task is blocked and will be processed after blocking taks(s) complete
    TC_FINISHED             = 3; // Task is finished and can be finalized/removed
    TC_RAW_DATA_TRANSFER    = 4;
    TC_RAW_DATA_DELETE      = 5;
    TC_RAW_DATA_UPDATE_SIZE = 6;
    TC_ALLOC_CREATE         = 7;
    TC_ALLOC_DELETE         = 8;
}

enum Encryption
{
    ENCRYPT_NONE    = 0;
    ENCRYPT_AVAIL   = 1;
    ENCRYPT_FORCE   = 2;
}

message TaskData
{
    required string                 id          = 1;
    required TaskType               type        = 2;
    required TaskStatus             status      = 3;
    required string                 client      = 4;
    required uint32                 step        = 5;
    required uint32                 steps       = 6;
    required string                 msg         = 7;
    required uint32                 ct          = 8;
    required uint32                 ut          = 9;
}


message HttpXfrData
{
    required string             rec_id      = 1;
    required string             from        = 3;
    required string             to          = 4;
    required uint32             started     = 5;
    required uint32             updated     = 6;
    required bool               failed      = 7;
    optional string             err_msg     = 8; // Only set if status == XFR_FAILED
}
